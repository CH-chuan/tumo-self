import { useState, useEffect } from "react";
import { createPortal } from "react-dom";
import { Button } from "@/components/ui/button";
import { Download, ImageIcon, AlertCircle, Share, ExternalLink } from "lucide-react";
import { Stopwatch } from "./stopwatch";
import { cn } from "@/lib/utils";
import { mediaHelpers } from "@/lib/media-helpers";
import { ProviderTiming } from "@/lib/media-types";
import { Label } from "@/components/ui/label";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "./ui/tooltip";

interface ImageDisplayProps {
  provider: string;
  image: string | null | undefined;
  timing?: ProviderTiming;
  failed?: boolean;
  fallbackIcon?: React.ReactNode;
  enabled?: boolean;
  modelId: string;
  imagePath?: string;
  imageUrl?: string;
  deleteButton?: React.ReactNode;
}

export function ImageDisplay({
  provider,
  image,
  timing,
  failed,
  fallbackIcon,
  modelId,
  imagePath,
  imageUrl,
  deleteButton,
}: ImageDisplayProps) {
  const [isZoomed, setIsZoomed] = useState(false);

  useEffect(() => {
    if (isZoomed) {
      window.history.pushState({ zoomed: true }, "");
    }

    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === "Escape" && isZoomed) {
        setIsZoomed(false);
      }
    };

    const handlePopState = () => {
      if (isZoomed) {
        setIsZoomed(false);
      }
    };

    if (isZoomed) {
      document.addEventListener("keydown", handleEscape);
      window.addEventListener("popstate", handlePopState);
    }

    return () => {
      document.removeEventListener("keydown", handleEscape);
      window.removeEventListener("popstate", handlePopState);
    };
  }, [isZoomed]);

  const handleImageClick = (e: React.MouseEvent) => {
    if (image || imageUrl) {
      e.stopPropagation();
      setIsZoomed(true);
    }
  };

  // Debug image URL
  useEffect(() => {
    if (imageUrl) {
      console.log(`Image Display - Image URL: ${imageUrl}`);
    }
  }, [imageUrl]);

  const handleDownloadClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();

    if (imageUrl) {
      // For remote images, fetch first and then save
      fetch(imageUrl)
        .then((response) => response.blob())
        .then((blob) => {
          const fileName = `${provider.toLowerCase()}-image-${Date.now()}.png`;
          const url = URL.createObjectURL(blob);
          const link = document.createElement("a");
          link.href = url;
          link.download = fileName;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(url);
        })
        .catch((error) => {
          console.error("Error downloading image:", error);
        });
    } else if (image) {
      // For base64 images, use mediaHelpers
      mediaHelpers.shareOrDownload(image, provider).catch((error) => {
        console.error("Failed to download image:", error);
      });
    }
  };

  return (
    <>
      <div
        className={cn(
          "relative w-full aspect-square group bg-zinc-50 rounded-lg overflow-hidden",
          (image || imageUrl) && !failed && "cursor-pointer",
          ((!image && !imageUrl) || failed) && "border-1 border-zinc-100"
        )}
        onClick={handleImageClick}
      >
        {(image || imageUrl || failed) && (
          <div className="absolute top-2 left-2 max-w-[50%] bg-white/95 px-2 py-1 flex items-center gap-2 rounded-lg">
            <TooltipProvider>
              <Tooltip delayDuration={100}>
                <TooltipTrigger asChild>
                  <Label className="text-xs text-gray-900 truncate min-w-0 grow">
                    {mediaHelpers.formatModelId(modelId)}
                  </Label>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{modelId}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        )}
        {(imageUrl || image) && !failed ? (
          <>
            <img
              src={imageUrl || (image ? `data:image/png;base64,${image}` : "")}
              alt={`Generated by ${provider}`}
              className="w-full h-full object-cover"
              crossOrigin="anonymous"
              onError={(e) => {
                console.error(`Error loading image: ${imageUrl}`);
                // If the image is from S3, try to fetch it through our API proxy
                if (
                  imageUrl &&
                  imageUrl.includes("s3.") &&
                  !imageUrl.includes("/api/media/s3-proxy/")
                ) {
                  // Extract the path from the S3 URL
                  const urlParts = imageUrl.split("/");
                  const bucketIndex = urlParts.findIndex((part) => part.includes("s3."));
                  if (bucketIndex >= 0) {
                    // Get everything after the bucket name
                    const pathParts = urlParts.slice(bucketIndex + 1);
                    const s3Path = pathParts.join("/");
                    // Create a proxy URL through our API
                    const proxyUrl = `/api/media/s3-proxy/${s3Path}`;
                    console.log(`Retrying with proxy URL: ${proxyUrl}`);
                    const imgElement = e.currentTarget as HTMLImageElement;
                    imgElement.src = proxyUrl;
                  }
                }
              }}
            />
            <div
              className="absolute top-2 right-2 flex flex-row-reverse space-x-2 space-x-reverse"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Delete button (if provided) */}
              {deleteButton}

              {/* Open in new tab button */}
              {imageUrl && (
                <TooltipProvider>
                  <Tooltip delayDuration={100}>
                    <TooltipTrigger asChild>
                      <Button
                        size="icon"
                        variant="secondary"
                        className="sm:opacity-0 sm:group-hover:opacity-100 transition-opacity bg-background/80 backdrop-blur-sm"
                        onClick={(e) => {
                          e.stopPropagation();
                          setIsZoomed(true);
                        }}
                      >
                        <ExternalLink className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>View image</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}

              {/* Download button */}
              <TooltipProvider>
                <Tooltip delayDuration={100}>
                  <TooltipTrigger asChild>
                    <Button
                      size="icon"
                      variant="secondary"
                      className="sm:opacity-0 sm:group-hover:opacity-100 transition-opacity bg-background/80 backdrop-blur-sm"
                      onClick={handleDownloadClick}
                    >
                      <Download className="h-4 w-4" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Download image</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>

            {timing?.elapsed && (
              <div className="absolute bottom-2 left-2 bg-black/70 backdrop-blur-sm rounded-md px-2 py-1 shadow">
                <span className="text-xs text-white/90 font-medium">
                  {(timing.elapsed / 1000).toFixed(1)}s
                </span>
              </div>
            )}
          </>
        ) : (
          <div className="absolute inset-0 flex flex-col items-center justify-center">
            {failed ? (
              <div className="flex flex-col items-center justify-center space-y-2 p-2">
                {fallbackIcon || <AlertCircle className="h-8 w-8 text-red-500" />}
                <p className="text-xs text-center text-red-500 font-medium px-2">
                  Image generation failed
                </p>
                <p className="text-[10px] text-center text-muted-foreground px-2">
                  The server took too long to respond
                </p>
              </div>
            ) : imageUrl ? (
              <>
                <img
                  src={imageUrl}
                  alt={`Generated by ${provider}`}
                  className="w-full h-full object-cover"
                />
                <div
                  className="absolute top-2 right-2 flex flex-row-reverse space-x-2 space-x-reverse"
                  onClick={(e) => e.stopPropagation()}
                >
                  {/* Delete button (if provided) */}
                  {deleteButton}

                  {/* Open in new tab button */}
                  <TooltipProvider>
                    <Tooltip delayDuration={100}>
                      <TooltipTrigger asChild>
                        <Button
                          size="icon"
                          variant="secondary"
                          className="sm:opacity-0 sm:group-hover:opacity-100 transition-opacity bg-background/80 backdrop-blur-sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            setIsZoomed(true);
                          }}
                        >
                          <ExternalLink className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>View image</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>

                  {/* Download button */}
                  <TooltipProvider>
                    <Tooltip delayDuration={100}>
                      <TooltipTrigger asChild>
                        <Button
                          size="icon"
                          variant="secondary"
                          className="sm:opacity-0 sm:group-hover:opacity-100 transition-opacity bg-background/80 backdrop-blur-sm"
                          onClick={handleDownloadClick}
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Download image</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
              </>
            ) : timing?.startTime ? (
              <>
                <Stopwatch startTime={timing.startTime} />
              </>
            ) : (
              <ImageIcon className="h-12 w-12 text-zinc-300" />
            )}
          </div>
        )}
      </div>

      {isZoomed &&
        (image || imageUrl) &&
        createPortal(
          <div
            className="fixed inset-0 bg-black/90 z-50 flex items-center justify-center cursor-pointer min-h-[100dvh] w-screen"
            onClick={() => setIsZoomed(false)}
          >
            <img
              src={imageUrl || (image ? `data:image/png;base64,${image}` : "")}
              alt={`Generated by ${provider}`}
              className="max-h-[90dvh] max-w-[90vw] object-contain"
              // Allow clicks to propagate to the parent div to close the preview
            />
          </div>,
          document.body
        )}
    </>
  );
}
